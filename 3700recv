#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math
import heapq
import zlib

# corrupted packets
# 1.


class Receiver:

    def __init__(self):
        self._next_expected = 0
        self._buffer = []
        self._sent = {}
        self._window = 8
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def check_resend(self):
        pass

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]

            self.check_resend()

            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                try:
                    msg = json.loads(data.decode('utf-8'))

                    checksum = zlib.crc32(msg['data'].encode('utf-8'))

                    if checksum != msg['checksum']:
                        continue
                except:
                    self.log("corrupted packet, skipping")
                    continue

                sequence = msg['sequence']

                # if not already parsed
                if (sequence >= self._next_expected):
                    self.log("Received data message %i" % sequence)

                    # if already in the buffer, remove it
                    for entry in self._buffer[:]:
                        if sequence == entry[0]:
                            self._buffer.remove(entry)

                    # add into the buffer (min heap)
                    if len(self._buffer) < self._window:
                        heapq.heappush(self._buffer, (sequence, msg))
                    else:
                        self.log("Dropped packet")

                # Always send back an ack
                ack = {"type": "ack", "sequence": msg["sequence"],
                       "time_sent": time.time(),
                       "adv_window": self._window - len(self._buffer)}
                ack['checksum'] = zlib.crc32(json.dumps(ack).encode('utf-8'))
                self.send(ack)

                # remove from buffer if correct sequence
                while len(self._buffer) > 0 and (self._buffer[0][0] == self._next_expected):
                    seq, msg = heapq.heappop(self._buffer)
                    print(msg["data"], end='', flush=True)
                    self._next_expected += 1

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
