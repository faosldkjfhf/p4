#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math

# TODO:
# Buffer class
# keep track of next expected sequence number
# add every packet into the buffer
# when we get the one with the next expected sequence number
# -> remove it and print msg to stdout


class Buffer:
    # next expected sequence number
    _expected = 0

    # buffered messages
    _buffer = []

    def __init__(self):
        pass

    def add(self, msg):
        self._buffer.append(msg)

    def remove(self):
        index = self.find_expected()
        if self.find_expected() == -1:
            return -1

        # Print out the data to stdout
        print(self._buffer[index]["data"], end='', flush=True)

        self._buffer.pop(index)
        # sys.stderr.write(f"Removed {index}\n")
        # sys.stderr.flush()
        self._expected += 1
        return self._expected - 1

    def find_expected(self):
        if len(self._buffer) == 0:
            return -1

        for i in range(len(self._buffer)):
            if self._buffer[i]['sequence'] == self._expected:
                return i

        return -1


class Receiver:

    def __init__(self):
        self._buffer = Buffer()
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        seen = []
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))

                self.log("RECEIVER")

                if (msg["sequence"] not in seen):
                    # seen.append(msg["sequence"])
                    self.log("Received data message %i" % msg['sequence'])

                    self._buffer.add(msg)

                    removed = self._buffer.remove()
                    while (removed != -1):
                        removed = self._buffer.remove()

                # Always send back an ack
                self.send(
                    {"type": "ack", "sequence": msg["sequence"], "time_sent": time.time()})
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
