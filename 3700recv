#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math
import heapq

# corrupted packets
# 1.


class Receiver:

    def __init__(self):
        self._next_expected = 0
        self._buffer = []
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                try:
                    msg = json.loads(data.decode('utf-8'))
                    # self.log(f"{msg}")
                    if 'checksum' in msg and 'data' in msg and sum(msg['data'].encode()) == msg['checksum']:
                        sequence = msg['sequence']

                        cwnd = msg['cwnd']

                        # if not already parsed
                        if (sequence >= self._next_expected):
                            self.log("Received data message %i" % sequence)

                            # if already in the buffer, remove it
                            for i in self._buffer[:]:
                                if sequence == i[0]:
                                    self._buffer.remove(i)

                            # add into the buffer (min heap)
                            heapq.heappush(self._buffer, (sequence, msg))

                            removed = False
                            # remove from buffer if correct sequence
                            while len(self._buffer) > 0 and (self._buffer[0][0] == self._next_expected):
                                seq, msg = heapq.heappop(self._buffer)
                                print(msg["data"], end='', flush=True)
                                self._next_expected += 1
                                self.send(
                                    {"type": "ack", "sequence": seq, "time_sent": time.time(), "adv_window": cwnd - len(self._buffer)})

                        # Always send back an ack
                        if 'sequence' in msg and 'cwnd' in msg:
                            self.send(
                                {"type": "ack", "sequence": msg["sequence"], "time_sent": time.time(), "adv_window": msg['cwnd'] - len(self._buffer)})
                except ValueError or KeyError:
                    pass
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
