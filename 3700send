#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math
import zlib

DATA_SIZE = 1375

# corruption - check sent sequence data == ack sequence date
# if not, resend


class Sender:
    _data = []
    _next = 0
    _parsed = False
    _buffer = {}
    _sent = {}
    _received = {}
    _sequence = 0
    # _acked = []
    _advertised_window = 8
    _rtt = 0

    _cwnd = 1
    _ssthresh = _advertised_window

    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.host, self.remote_port))

    def calc_rtt(self, new_rtt):
        alpha = 0.875
        self._rtt = ((alpha * self._rtt) + ((1 - alpha) * new_rtt))
        self.log(f"rtt: {2 * self._rtt}")

    def check_resend(self):
        for seq in self._sent.keys():
            if (time.time() - self._sent[seq]) > 2 * self._rtt:
                self.log("Resending message %i" % seq)
                self._sent[seq] = time.time()
                # self._buffer[seq]['time_sent'] = time.time()
                self.send(self._buffer[seq])

                # packet timed out so resend and adjust cwnd
                self._ssthresh = int(self._cwnd) / 2
                self._cwnd = 1

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [
                self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]

            # check if anything must be resent
            self.check_resend()

            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)

                    # TODO: Add checksum check
                    try:
                        msg = k.decode('utf-8')
                        msg = json.loads(msg)
                        msg_checksum = msg['checksum']
                        del msg['checksum']
                        checksum = zlib.crc32(json.dumps(msg).encode('utf-8'))

                        if checksum != msg_checksum:
                            continue

                    except:
                        continue

                    sequence = msg['sequence']
                    self.log("Received message %i" % sequence)
                    self._advertised_window = 0 if msg['adv_window'] < 0 else msg['adv_window']
                    if (sequence >= self._next):
                        self._received[sequence] = time.time()

                    # increase congestion window
                    if (self._cwnd < self._ssthresh):
                        self._cwnd += 1
                    else:
                        self._cwnd += 1 / self._cwnd

                    # pop in order
                    while self._next in self._received:
                        self.calc_rtt(
                            self._received[self._next] - self._buffer[self._next]['time_sent'])
                        del self._buffer[self._next]
                        del self._sent[self._next]
                        del self._received[self._next]
                        self._next += 1

                    # if there is nothing in the buffer, send more
                    if len(self._buffer.keys()) == 0:
                        self.waiting = False

                elif conn == sys.stdin:
                    # parse all data
                    if not self._parsed:
                        self.load_data()

                    # add to buffer until window is full
                    window = min(int(self._advertised_window), int(self._cwnd))
                    # self.log(f"window: {window}")

                    for _ in range(window):
                        # no more data and buffer is all empty
                        if len(self._data) == 0 and len(self._buffer) == 0:
                            self.log("All done!")
                            sys.exit(0)

                        # no more data but buffer not empty
                        if len(self._data) == 0:
                            break

                        # send the next message
                        msg = self._data.pop(0)
                        msg['time_sent'] = time.time()

                        self.send(msg)
                        self.log("Sending message %i" % msg['sequence'])

                        self._sent[msg['sequence']] = msg['time_sent']
                        self._buffer[msg['sequence']] = msg

                    self.waiting = True
        return

    def load_data(self):
        data = sys.stdin.read(DATA_SIZE)
        while (len(data) > 0):
            msg = {"type": "msg", "data": data,
                   "sequence": self._sequence,
                   "checksum": self.checksum(data)}
            self._data.append(msg)
            self._sequence += 1
            data = sys.stdin.read(DATA_SIZE)
        self._parsed = True

    def checksum(self, msg):
        return zlib.crc32(msg.encode('utf-8'))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
