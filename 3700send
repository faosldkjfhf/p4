#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math

DATA_SIZE = 1375

# corruption - check sent sequence data == ack sequence date
# if not, resend


class Sender:
    _data = []
    _buffer = []

    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.host, self.remote_port))

    def run(self):
        sequence = 0
        window = 4
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [
                self.socket]

            # check if anything must be resent
            if self.waiting:
                current_time = time.time()
                for entry in self._buffer:
                    if current_time - entry['time_sent'] > 1.0:
                        self.log("Resending message %i" %
                                 entry['sequence'])
                        entry['time_sent'] = current_time
                        self.send(entry)

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)

                    try:
                        msg = k.decode('utf-8')
                        msg = json.loads(msg)
                        self.log("Received message %i" % msg['sequence'])
                        sequence_number = msg['sequence']

                        for entry in self._buffer[:]:
                            if entry['sequence'] == sequence_number:
                                self._buffer.remove(entry)
                                break

                        if len(self._buffer) == 0:
                            self.waiting = False
                    except ValueError:
                        pass
                elif conn == sys.stdin:
                    # parse all data
                    if len(self._data) == 0:
                        data = sys.stdin.read(DATA_SIZE)
                        while (len(data) > 0):
                            msg = {"type": "msg", "data": data,
                                   "sequence": sequence, "time_sent": time.time()}
                            self._data.append(msg)
                            sequence += 1
                            data = sys.stdin.read(DATA_SIZE)

                    for _ in range(window):
                        if len(self._data) == 0 and len(self._buffer) == 0:
                            self.log("All done!")
                            sys.exit(0)

                        if len(self._data) == 0:
                            break

                        msg = self._data.pop(0)
                        msg['time_sent'] = time.time()
                        self._buffer.append(msg)
                        self.send(msg)
                        self.log("Sending message %i" % msg['sequence'])

                    self.waiting = True
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
