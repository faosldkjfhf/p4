#!/usr/bin/env -S python3 -u

import argparse
import socket
import time
import json
import select
import struct
import sys
import math

DATA_SIZE = 1375


class Buffer:
    def __init__(self, size):
        self.size = size
        self.data = []

    def add(self, msg):
        self.data.append(msg)

    def remove(self, sequence):
        for entry in self.data[:]:
            if entry['sequence'] == sequence:
                self.data.remove(entry)

    def full(self):
        return self.size == len(self.data)

    def contains(self, msg):
        return msg in self.data

    def check_timeout(self):
        msg_to_resend = []
        current_time = time.time()
        for entry in self.data:
            if current_time - entry['time_sent'] > 1.0:
                msg_to_resend.append(entry)
        return msg_to_resend


class Sender:

    def __init__(self, host, port):
        self._buffer = Buffer(4)
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), (self.host, self.remote_port))

    def run(self):
        sequence = 0
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [
                self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = k.decode('utf-8')

                    msg = json.loads(msg)
                    self.log("Received message %i" % msg['sequence'])
                    sequence_number = msg['sequence']
                    self._buffer.remove(sequence_number)

                    self.waiting = False
                elif conn == sys.stdin:
                    # To handle dupes:
                    # check window full before sending next?
                    resend = self._buffer.check_timeout()
                    if len(resend) > 0:
                        for msg in resend:
                            if (self._buffer.full()):
                                break

                            self.log("Resending message %i" %
                                     msg['sequence'])
                            self.send(msg)

                            # update time sent
                            msg = {"type": "msg", "data": msg['data'],
                                   "sequence": msg['sequence'], "time_sent": time.time()}
                            self._buffer.remove(msg['sequence'])
                            self._buffer.add(msg)

                    while not self._buffer.full():
                        # self.log("HELLO")
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0 and len(self._buffer.data) == 0:
                            self.log("All done!")
                            sys.exit(0)

                        if len(data) != 0:
                            msg = {"type": "msg", "data": data,
                                   "sequence": sequence, "time_sent": time.time()}
                            sequence += 1
                            self.log("Sending message %i" % msg['sequence'])
                            self._buffer.add(msg)
                            self.send(msg)

                        else:
                            break

                    self.waiting = True

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
